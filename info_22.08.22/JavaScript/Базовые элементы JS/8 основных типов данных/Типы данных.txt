

В JavaScript есть 8 основных типов.

в JavaScript существует 8 типов данных. Семь из них называются «примитивными», 
так как содержат только одно значение (будь то строка, число или что-то другое).

1. number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
2. bigint для целых чисел произвольной длины.
3. string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
4. boolean для true/false.
5. null для неизвестных значений – отдельный тип, имеющий одно значение null.
6. undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
7. object для более сложных структур данных.
8. symbol для уникальных идентификаторов.


Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.

Имеет две формы: typeof x или typeof(x).
Возвращает строку с именем типа. Например, "string".
Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.



1 ------------------------------------Number-----------------------------------------

Тип Number представляет числа в JavaScript, которые могут быть целыми или дробными:

Целые числа, например, 35. Мы можем использовать как положительные, так и отрицательные числа. 
Диапазон используемых чисел: от -2 в 53 степени до 2 в 53чтепени

Дробные числа (числа с плавающей точкой), например, 3.5575. Опять же можно использовать как положительные, так и отрицательные числа. 
Для чисел с плавающей точкой используется тот же диапазон: от -253 до 253

Например:
let x = 45; ---- целое число
let y = 23.897;  ----- число с плавающей точкой


Ноль в JavaScript имеет два представления: -0 и +0. («0» это синоним +0). 
На практике это имеет малозаметный эффект. Например, выражение +0 === -0 является истинным.

А также есть специальные значения, которые по сути не являются числами, 
но принадлежат к числовому типу данных: Infinity (бесконечность) и NaN (Not a Number - “Не Число”)

let inf = Infinity; // прямое присвоение бесконечности
inf = 57 / 0; // Infinity получится при делении на ноль
inf = -Infinity; // есть отрицательная бесконечность
inf = 57 / -0; // -Infinity

let notNumber = NaN;
notNumber = "строка" * 5; // При ошибке вычисления вернёт NaN



2 ----------------------------------BigInt-------------------------------------------------


Тип BigInt добавлен в последних стандартах JavaScript для представления очень больших целых чисел, 
которые выходят за пределы диапазона типа данных - number. 
Это не значит, что мы не можем совсем работать с большими числами с помощью типа number, 
но работа с ними в случае с типом number будет сопряжена с проблемами. Рассмотрим небольшой пример:

let num = 9007199254740991
console.log(num);       // 9007199254740991
console.log(num + 1);   // 9007199254740992
console.log(num + 2);   // 9007199254740992
Здесь переменной num присваивается максимальное значение. И далее прибавляем к ней некоторые значения и выводим на консоль результат. 
И результаты могут нас смутить, особенно в случае прибавления числа 2.


Для определения числа как значения типа BigInt в конце числа добавляется суффикс n:

let dimension = 19007n;
const value = 2545n;
Например, изменим из предыдущего примера тип number на bigint:

let num = 9007199254740991n
console.log(num);       // 9007199254740991n
console.log(num + 1n);  // 9007199254740992n
console.log(num + 2n);  // 9007199254740993n
console.log(num + 3n);  // 9007199254740994n



3 ------------------------------------------String------------------------------------------------

Тип String представляет строки. Для определения строк применяются кавычки, причем, можно использовать как двойные, 
так одинарные, так и косые кавычки. Единственно ограничение: тип закрывающей кавычки должен быть тот же, что и тип открывающей, 
то есть либо обе двойные, либо обе одинарные.

let user = "Tom";
let company = 'Microsoft';
let language = `JavaScript`;
 
console.log(user);
console.log(company);
console.log(language);

Если внутри строки встречаются кавычки, то мы их должны экранировать слешем. 
Например, пусть у нас есть текст "Бюро "Рога и копыта"". Теперь экранируем кавычки:

let company = "Бюро \"Рога и копыта\"";
Также мы можем внутри стоки использовать другой тип кавычек:

let company1 = "Бюро 'Рога и копыта'";
let company2 = 'Бюро "Рога и копыта"';


4 ------------------------------------ Boolean -------------------------------------------

Тип Boolean представляет булевые или логические значения true (верно) и false (ложно):

let isAlive = true;
let isDead = false;




5 и 6 ------------------------------  null и undefined --------------------------------------


Null- чего-то не существует!!!

null - этот тип данных имеет всего одно значение: null. Которое выражает нулевое или «пустое» значение. 
Можно сказать, что оно передает смысл «нет значения»

Undefined – что-то существуюет ,но нет значения.  указывает, что значение не определено или не установлено. 
undefined - тип данных, который так же имеет только одно соответствующее значение: undefined. 
И отражает то, что данное значение «не определено». Например, если переменная была объявлена без присвоения ей какого-либо значение, 
то её значение будет undefined.

        let data;
        console.log(data); // undefined

let isAlive;
console.log(isAlive); // выведет undefined



Присвоение значение null означает, что у переменной отсутствует значение:

let isAlive;
console.log(isAlive); // undefined
isAlive = null;
console.log(isAlive); // null
isAlive = undefined;  // снова установим тип undefined
console.log(isAlive); // undefined




7   -------------------------- object ------------------------------------------

тип данных Объект относится к структуре данных. Он содержит в себе данные и инструкции по работе с этими данными. 
Объект — это ссылочный тип данных, то есть это значение в памяти, на которое возможно сослаться с помощью идентификатора. 
Все другие структуры данных, такие как Функции (Functions), Массивы (Arrays), Коллекции (Maps, Sets, WeakMaps, WeakSets) и т.д. 
тоже являются объектами.

Простейшее определение объекта представляют фигурные скобки:

let user = {};
Объект может иметь различные свойства и методы:

const user = {name: "Tom", age:24};
console.log(user.name);
В данном случае объект называется user, и он имеет два свойства: name и age.



--------------------------------------- Типизация  ------------------------

JavaScript является языком со слабой типизацией. Это значит, что переменные могут динамически менять тип. Например:

let id;  // тип undefined
console.log(id);
id = 45;  // тип number
console.log(id);
id = "45"; // тип string
console.log(id);
Несмотря на то, что во втором и третьем случае консоль выведет нам число 45, но во втором случае переменная id будет представлять число,
 а в третьем случае - строку.

Это важный момент, который надо учитывать и от которого зависит поведение переменной в программе:

let a = 45;  // тип number
let b = a + 5;
console.log(b); // 50
     
a = "45"; // тип string
let c = a + 5
console.log(c); // 455
Выше в обоих случая к переменной a применяется операция сложения (+). 
Но в первом случае a представляет число, поэтому результатом операции a + 5 будет число 50.

Во втором случае a представляет строку. Но операция сложения между строкой и числом 5 невозможна. 
Поэтому число 5 будет преобразовываться к строке, и будет происходить операция объединения строк. 
Поэтому во втором случае результатом выражения a + 5 будет стока "455".

