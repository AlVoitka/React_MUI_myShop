Способ поиска совподений со строкой! - это и есть регулярные выражения.

https://regex101.com/
https://regexr.com/3f8cm  ---- проверка на совпадение



^[a-zA-Z]{4,}(?: [a-zA-Z]+){0,2}$  - на имя и фамилую

^[a-zA-Z]{4,5}(?: [a-zA-Z]{4,5})$  --- 4-5 символов в пером слове, 4-5 во втором и только один пробел

^[a-zA-Z]{4,}(?: [a-zA-Z]+)?(?: [a-zA-Z]+)?$  - на имя и фамилую

1.
ввести имя и фамилию, используя только кириллицу + чтобы обязательно был пробел после имени.

^[A-ЯЁ][а-яё]+\s[A-ЯЁ][а-яё]+$

^[А-ЯЁ][а-яё]* [А-ЯЁ][а-яё]*$

[А-Я][а-я]+\s[А-Я][а-я]+


2.
 First / Last name

 '([A-Z][a-z]*)([\\s\\\'-][A-Z][a-z]*)*'

 / ([a-zA-Z]+\s)+[a-zA-Z]+ /

 ^(\d{3})\s([A-Za-z\sé])([\d\s-])$

 ^[A-Z][-a-zA-Z]+$




Составим регулярное выражение для проверки email:

/^[\w-\.]+@[\w-]+\.[a-z]{2,4}$/i
Разберём правило по частям:

Регулярное выражение должно открываться и закрываться символами «/». После закрывающегося символа можно указать директиву. 
В нашем случае такой директивной является «i», которая отключает проверку вводимых букв на регистр.
 То есть, становится не важно, ввели «test@mail.ru» или «Test@Mail.RU».
Знаки «^» и «$» обозначают начало и конец проверяемой строки. Если их убрать, 
то правило вернет положительный результат даже если в начале или конце электронного адреса поставить запрещенные знаки. 
То есть, при вводе «%:&test@mail.ru#6&» функция проверки вернет положительный результат, 
так как в строке имеется последовательность символов, удовлетворяющая нашему правилу. 
Для исключения такой возможности указываем, что правило должно применяться ко всей строке, а не к её части.
Блок «[\w-\.]+» отвечает за проверку названия ящика. 
В квадратных скобках указываем разрешенные символы: «\w» — все латинские буквы, цифры и знак подчеркивания. 
Так же рекомендую добавлять знак тире и точку «-\.». «+» после квадратных скобок указывает
 на возможность повторения символов — один или много раз.
Далее идет знак собаки и доменное имя почтового сервера — «@[\w-]+». 
Здесь практически тоже самое что и в предыдущем блоке. Исключаем только из набора символов точку.
Осталось прописать правило для проверки наличия точки и корректности доменного имени верхнего уровня (ru,com,info). «\.[a-z]{2,4}». 
Для обозначения знака точки мы указываем её с обратным слешем «\.» 
Без него она будет восприниматься зарезервированным символом регулярки, который обозначает возможность наличия на её месте любого символа. 
За точкой должно следовать доменное имя верхнего уровня. Это минимум 2 латинские буквы — «[a-z]{2,4}».
Разобранный пример немного упрощен для лучшего восприятия. 
У него есть недостаток — первым знаком в email не может быть тире или точка, но приведенное регулярное выражение этого не учитывает. 
Чтобы это исправить следует его немного поправить:

/^[\w]{1}[\w-\.]*@[\w-]+\.[a-z]{2,4}$/i




Проверка валидности номера телефона в javascript
С номером телефона ситуация сложнее, так как номер можно ввести десятками способов:

8 999 1234567
8 (999) 1234567
8 999 123-45-67
+7 (999) 123 45 67
Есть несколько выходов из ситуации:

продумать все возможные шаблоны и составлять для них правила;
заставить посетителя вводить телефон по определенному шаблону;
ограничиться проверкой на случайные ошибки.
Для форм обратной связи последний вариант кажется наилучшим. 
Во-первых, если человек не хочет указывать свой номер телефона, то никакие проверки на корректность не помогут.
 Он просто введет несуществующий или чужой номер. Во-вторых, посетители сайта не любят когда их загоняют в определенные рамки. 
 Поэтому рекомендую использовать регулярное выражение следующего типа:

/^[\d\+][\d\(\)\ -]{4,14}\d$/
В правиле указываем что первый символ должен быть обязательно цифрой или плюсом «[\d\+]», а последний только цифрой — «\d». 
В середине разрешаем использовать скобоки, пробел и знак дефиса — «[\d\(\)\ -]{4,14}», от 4 до 14 символов. 
Так как скобки и пробел являются зарезервированными элементами регулярных выражений, перед ними ставим обратный слеш.