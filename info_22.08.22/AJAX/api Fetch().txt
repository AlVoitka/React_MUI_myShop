Application Programming Interface — «программный интерфейс приложения») — описание способов (набор классов, процедур, функций, структур или констант), 
которыми одна компьютерная программа может взаимодействовать с другой программой.

Если переводить на русский, это было бы слово «договор». Договор между двумя сторонами, как договор на покупку машины:

мои обязанности — внести такую то сумму,
обязанность продавца — дать машину.

Перевести можно, да. Но никто так не делает ¯\_(ツ)_/¯

Все используют слово «контракт». Так принято. К тому же это слово входит в название стиля разработки:

Code first — сначала пишем код, потом по нему генерируем контракт
Contract first — сначала создаем контракт, потом по нему пишем или генерируем код (в этой статье я буду говорить именно об этом стиле)

Мы же не говорим «контракт на продажу машины»? Вот и разработчики не говорят «договор». Негласное соглашение.


https://dash.fortnite-api.com/endpoints/map  --- бесплатный сервер работающий без api_key  - Только GET -запросы

https://jsonplaceholder.typicode.com/  --- тут и GET и POST запросы








Fetch API предоставляет интерфейс JavaScript для работы с запросами и ответами HTTP построенная на промисах. 
Он также предоставляет глобальный метод fetch() (en-US), который позволяет легко и логично получать ресурсы по сети асинхронно.

Для правильной работы нужно создать файлик в корне проекта server.php,

в нем:

<?php
echo var_dump($_POST);

1.
сделяю GET запрос на получение данных:

onPostData = (e) => {   
    e.preventDefault();
    
    fetch('https://jsonplaceholder.typicode.com/posts')   --- метод с URL сервера, этот метод использует промисы, он возвращает промис
                                                             я получу промис и обрабоаю его при помощи методов then() или cach()

    .then( response => response.json()) ---- обрабоаю ответ respons(он в формате json), =>response.json() - так трансформирую в обычный объект
                    нюанс в том, что тут - response.json() возвращается снова промис, тк не понятно как быстро обработаетс яв обычный объект,
                    И если он трагсформирован успешно, то снова работсем с промисом на метод then()

    .then(json => console.log(json));  --- тут аргумент json - это уже обычный бъект js
    }


также у fetch() есть метод text если данные с вервера приходят в текстовом формате:

fetch('https://jsonplaceholder.typicode.com/posts')
    .then( response => response.text())  --- вот так используется


2. Для отправки POST запроса - опубликования данных
в метод fetch() добавляется еще один аргумет кроме URL, это объект с настройками:
Этот объект содежит моного различных свойств, но обязательными являются два:
-method
-body
к необязательными относятся:
-headers
В headers прописывается информация о том, что именно я отправляю, как она закодировани и в каком формате.(JSON к примеру или просто текс, 
изображения). Делается это для того чтобы протоколы HTTP четко понимали что они передают, а сервер понимал что принемает.
Для всего этого используются заголовки -headers!


onPostData = (e) => {   
    e.preventDefault();
    
    fetch('https://jsonplaceholder.typicode.com/posts', {
        method: "POST",                     ---------------------------- метод отправки, может быть и GET
        body: JSON.stringify({name: 'Alex'}),  ------ тело. А в stringify можно помещать как строку так и объект.  Тут объект превратится 
                                                в JSON формат и будет отправлен при помощи fech
        headers: {         -----------------заголовки, определяет какой контент я отправляю
            'Content-type': 'application/json'
        }
    })

    .then( response => response.json())
    .then(json => console.log(json));  //  ---- {name: 'Alex', id: 101} получаю ответ от сервера с id:101 - это значит, что 101 запись 
}                                                                    поместилась в базу данных