

XMLHttpRequest – это встроенный в браузер объект, который даёт возможность делать HTTP-запросы к серверу без перезагрузки страницы.
На сегодняшний день не обязательно использовать XMLHttpRequest, так как существует другой, более современный метод fetch.

В современной веб-разработке XMLHttpRequest используется по трём причинам:

По историческим причинам: существует много кода, использующего XMLHttpRequest, который нужно поддерживать.
Необходимость поддерживать старые браузеры и нежелание использовать полифилы (например, чтобы уменьшить количество кода).
Потребность в функциональности, которую fetch пока что не может предоставить, к примеру, отслеживание прогресса отправки на сервер.

XMLHttpRequest имеет два режима работы: синхронный и асинхронный.

Сначала рассмотрим асинхронный, так как в большинстве случаев используется именно он.

let xhr = new XMLHttpRequest(); // у конструктора нет аргументов
Конструктор не имеет аргументов.


1.
На форму вовесил 


onPostData = (e) => {  -----2. Ваызывается метод
    e.preventDefault();
    console.log("Ушел")

    const request = new XMLHttpRequest();  ----- 3. Создаю объект в переменной request - запрос


return (
    <form className="form"
        onSubmit={this.onPostData}>  -----1. Срабатывает событие на формк  и вызываю метод
        <h2>Форма обратной связи</h2>   


2.
Далее применяю встроенные методы по работе с запросами:

request.open(); - метотд собырающий настройки для запроса
Он принемает в сабя следующие аргументы:

-method : get, post и тд
-URL: - важный момент - путь относительно файла index.html если DB в проекте
-async: отвечает за асинхронность. Базовая позиция true. Но если поставить false, то пока не придет ответ с сервера,
                                    весь последующий код не будет исполняться. Жто кране редко используется
                                
-login: можно повесить стоббы без авторизации не отправлялись запросы
-pass:

получаю:

request.open('POST','https://jsonplaceholder.typicode.com/posts');   ---- передал 2 авргумена, а остальные уже не обязательны



3.
Донастроить запром нужно при поможи встроенногог метода setRequestHeader();
Тут прописывается информация о том, что именно я отправляю, как она закодировани и в каком формате.(JSON к примеру или просто текс, изображения).
Делается это для того чтобы протоколы HTTP четко понимали что они передают, а сервер понимал что принемает.
Для всего этого используются заголовки -headers!

request.setRequestHeader('Content-type', 'application/json;', 'charset=utf-8');  --- так указал что мой контент в формате json
                                                                                   и указал кодировку 'charset=utf-8'

4.
Пришло время отправки самого запроса:

request.send();  -- это метод принемает аргумент bady если реализуется POST запрос, В GET аргументов нет тк принемаем


5.
Когда пришел ответ с сервера , его нужно обработать. Для этого есть свойства:

-status  - тут номер
-statusText  - тут текстовое описание
-response - ответ , то чприходит по GET  запросу. То что задал back-end разработчик
-readyState - текущее состояние запроса
 Свойство XMLHttpRequest.readyState возвращает текущее состояние объекта XMLHttpRequest. Объект XHR может иметь следующие состояния:

Значение	Состояние	Описание
0	UNSENT	Объект был создан. Метод open() ещё не вызывался.
1	OPENED	Метод open() был вызван.
2	HEADERS_RECEIVED	Метод send() был вызван, доступны заголовки (headers) и статус.
3	LOADING	Загрузка; responseText содержит частичные данные.
4	DONE	Операция полностью завершена.


const request = new XMLHttpRequest();

        request.open('POST','https://jsonplaceholder.typicode.com/posts');
        request.setRequestHeader('Content-type', 'application/json;', 'charset=utf-8');
        request.send(this.state);
        console.log(request.status); // 0
        console.log(request.readyState); // 1

6.
Также можно работать с событиями:

'readystatechange' - это событие отслеживает статус готовности запроса в текущий момент и срабатывает на каждой стадии от 0 до 4
'load' - срабатывает только 1 раз когда запрос полностью загрузился и получен результат

onPostData = (e) => {
        e.preventDefault();
        console.log("Ушел")

        const request = new XMLHttpRequest();

        request.open('POST','https://jsonplaceholder.typicode.com/posts');
        request.setRequestHeader('Content-type', 'application/json;', 'charset=utf-8');
        request.send(this.state);
        console.log(request.readyState);
-----------------------
        request.addEventListener('readystatechange', ()=> {  ------ вот навесил его на обработчик события
            if (request.readyState === 4 && request.status === 201) {console.log(request.response, 'ok')} ---- -response - ответ , то чприходит по GET  запросу
        }) else {                                                                                    при такой строке запрос успешно завершился(request.readyState === 4 && request.status === 201)
                console.log('Error')
            }
            тут важно понимать что readyState работает поэтапно от 0 до 4, и соответственно в консод даст 2 Error и 'ок' 
            так как код пройдет все этапы    
--------------------------------
        request.addEventListener('load', ()=> {
            if (request.status === 201) {
                console.log('ok')
            } else {
                console.log('Error')
            }                                         
